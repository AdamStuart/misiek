/*
 * InteractionsLoaderPanel.java
 *
 * Created on 2009-04-11, 22:30:19
 */
package mcv.ui;

import mcv.io.AbstractDataReader;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.util.Collection;
import java.util.HashSet;
import java.util.Vector;
import javax.help.CSH;
import mcv.help.MCVHelpBroker;
import mcv.logicmodel.controllers.DataHandle;
import mcv.logicmodel.structs.Interaction;
import mcv.logicmodel.structs.PPINetwork;
import mcv.main.LoadedDataHandle;
import mcv.main.PluginDataHandle;
import mcv.ui.listeners.InteractionsLoadedListener;

/**
 *
 * @author misiek
 */
public class InteractionsLoaderPanel extends javax.swing.JPanel {

    Collection<SpeciesInteractionsLoaderPanel> panels = new Vector<SpeciesInteractionsLoaderPanel>();
    InteractionsLoadedListener list;

    public InteractionsLoaderPanel(InteractionsLoadedListener list) {
        this.list = list;
        initComponents();
        //    System.out.println("HEHEHE");
        // initSpeciesList();
        initSpeciesList();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        loadingPanel = new javax.swing.JPanel();
        infoButton = new javax.swing.JButton();

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mcv/resources/icons/update.png"))); // NOI18N
        loadButton.setText("Update");
        loadButton.setName("loadButton"); // NOI18N
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        loadingPanel.setName("loadingPanel"); // NOI18N

        javax.swing.GroupLayout loadingPanelLayout = new javax.swing.GroupLayout(loadingPanel);
        loadingPanel.setLayout(loadingPanelLayout);
        loadingPanelLayout.setHorizontalGroup(
            loadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 415, Short.MAX_VALUE)
        );
        loadingPanelLayout.setVerticalGroup(
            loadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 332, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(loadingPanel);

        infoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mcv/resources/icons/help.png"))); // NOI18N
        infoButton.setText("File format info");
        infoButton.setName("infoButton"); // NOI18N
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 138, 138))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /* private void initSpeciesList() {
    DataHandle dh = PluginDataHandle.getDataHandle();
    if (dh == null) {
    return;
    }

    DefaultTableModel tableModel = (DefaultTableModel) intLoadingTable.getModel();
    for (String species : dh.getNetworks().keySet()) {
    tableModel.addRow(new Object[]{species, genereteTreshold(species)});
    }
    }*/
    public void initSpeciesList() {
        DataHandle dh = PluginDataHandle.getDataHandle();
        if (!dh.isProteinsLoaded()) {
            return;
        }

        loadingPanel.setLayout(new GridLayout(dh.getNetworks().keySet().size(), 1));

        for (String species : dh.getNetworks().keySet()) {
            SpeciesInteractionsLoaderPanel panel = new SpeciesInteractionsLoaderPanel(species);
            System.out.println("species: " + species);
            panels.add(panel);
            loadingPanel.add(panel);
        }
    }

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        for (SpeciesInteractionsLoaderPanel speciesPanel : panels) {

            String speciesName = speciesPanel.getSpeciesName();
            PPINetwork network = PluginDataHandle.getDataHandle().getNetworks().get(speciesName);
            if (speciesPanel.checked()) {
                String filename = speciesPanel.tryGetFilepath();
                if (filename != null) {
                    Double oldTresholdOrNull = PluginDataHandle.getLoadedDataHandle().getSpeciesInteractionsTreshold(speciesName);
                    Double tresholdOrNull = speciesPanel.tryGetTreshold();
                    updateInteractionsDataForSpecies(network, speciesName, filename, tresholdOrNull, oldTresholdOrNull);
                }
            } else {
                network.deleteAllInteractions();
                PluginDataHandle.getLoadedDataHandle().deleteInteractionData(speciesName);
            }
        }
        list.actionPerformed(new ActionEvent(this, 3, "Interactions loaded"));

}//GEN-LAST:event_loadButtonActionPerformed

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
        CSH.DisplayHelpFromSource csh = new CSH.DisplayHelpFromSource(MCVHelpBroker.getHelpBroker("Interactions file format"));
        csh.actionPerformed(new ActionEvent(this, 120, "Interactions file format"));
    }//GEN-LAST:event_infoButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton infoButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JPanel loadingPanel;
    // End of variables declaration//GEN-END:variables

    private void readAISpeciesInteractions(PPINetwork network, String filepath, Double treshold, Double oldTreshold) {

        if (treshold == null && oldTreshold == null) {
            return;
        } else if (treshold == null && oldTreshold != null) {
            network.deleteAllInteractions();
            AbstractDataReader.getInstance().readSpeciesInteractions(network, filepath, treshold);
        } else if (treshold != null && oldTreshold == null) {
            network.deleteAllInteractions();
            AbstractDataReader.getInstance().readSpeciesInteractions(network, filepath, treshold);
        } else if (treshold < oldTreshold) {
            network.deleteAllInteractions();
            AbstractDataReader.getInstance().readSpeciesInteractions(network, filepath, treshold);
        } else if (treshold > oldTreshold) {
            Collection<Interaction> intBackup = new HashSet<Interaction>(network.getInteractions().values());
            for (Interaction inter : intBackup) {
                if (inter.getProbability() < treshold) {
                    network.deleteInteraction(inter.getID());
                }
            }

        } else {   // treshold == oldTreshold
            return;
        }
    }

    private void updateInteractionsDataForSpecies(PPINetwork network, String speciesName, String filename, Double tresholdOrNull, Double oldTresholdOrNull) {
        LoadedDataHandle ldh = PluginDataHandle.getLoadedDataHandle();
        if (ldh.loadedInteractions(speciesName)) {
            //Double oldTresholdOrNull = ldh.getSpeciesInteractionsTreshold(speciesName);
            ldh.deleteInteractionData(speciesName);
            // network.deleteAllInteractions();

            ldh.addInteractionData(speciesName, filename, tresholdOrNull);
            readAISpeciesInteractions(network, filename, tresholdOrNull, oldTresholdOrNull);
        //       AbstractDataReader.getInstance().readAISpeciesInteractions(network, filename, tresholdOrNull, oldTresholdOrNull);
        } else {
            ldh.addInteractionData(speciesName, filename, tresholdOrNull);
            AbstractDataReader.getInstance().readSpeciesInteractions(network, filename, tresholdOrNull);
        }
    }
}
