/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExperimentsLoadingPanel.java
 *
 * Created on 2009-07-05, 20:49:40
 */
package mcv.ui.dataloading;

import java.awt.event.ActionEvent;
import java.io.File;
import javax.help.CSH;
import javax.swing.JFileChooser;
import mcv.help.MCVHelpBroker;
import mcv.main.PluginDataHandle;
import mcv.ui.UIController;

/**
 *
 * @author misiek
 */
public class ExperimentsLoaderPanel extends javax.swing.JPanel {

    private String filepath;
    private DataLoaderPanel loaderPanel;

    /** Creates new form ExperimentsLoadingPanel
     * @param loaderPanel 
     */
    public ExperimentsLoaderPanel(DataLoaderPanel loaderPanel) {
        this.loaderPanel = loaderPanel;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseFile = new javax.swing.JButton();
        loadTreeButton = new javax.swing.JButton();
        cleanButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        filenameLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        speciesTree = new javax.swing.JTree();

        chooseFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mcv/resources/icons/com.png"))); // NOI18N
        chooseFile.setText("Choose file");
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("mcv/ui/resources/Loading"); // NOI18N
        chooseFile.setToolTipText(bundle.getString("ChooseFileFamiliesTreeButton.ToolTip")); // NOI18N
        chooseFile.setName("chooseFile"); // NOI18N
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });

        loadTreeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mcv/resources/icons/save.png"))); // NOI18N
        loadTreeButton.setText("Load tree");
        loadTreeButton.setToolTipText(bundle.getString("LoadFamiliesTreesButton.ToolTip")); // NOI18N
        loadTreeButton.setName("loadTreeButton"); // NOI18N
        loadTreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTreeButtonActionPerformed(evt);
            }
        });

        cleanButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mcv/resources/icons/clean.png"))); // NOI18N
        cleanButton.setText("Clean");
        cleanButton.setToolTipText(bundle.getString("CleanSpeciesTree.ToolTip")); // NOI18N
        cleanButton.setName("cleanButton"); // NOI18N
        cleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanButtonActionPerformed(evt);
            }
        });

        helpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mcv/resources/icons/help.png"))); // NOI18N
        helpButton.setText("File format info");
        helpButton.setToolTipText(bundle.getString("FileFormatInfoSpecies.ToolTip")); // NOI18N
        helpButton.setName("helpButton"); // NOI18N
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        filenameLabel.setText("filename");
        filenameLabel.setName("filenameLabel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        speciesTree.setName("speciesTree"); // NOI18N
        jScrollPane1.setViewportView(speciesTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 460, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(chooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(loadTreeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cleanButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(filenameLabel)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(4, 4, 4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(loadTreeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(helpButton)
                        .addComponent(cleanButton))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(filenameLabel)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                    .addGap(19, 19, 19)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(fc);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            filepath = file.getAbsolutePath();
            filenameLabel.setText(filepath);
            PluginDataHandle.getLoadingDataHandle().setSpeciesFilename(filepath);
            loadTreeButton.setEnabled(true);
        }
}//GEN-LAST:event_chooseFileActionPerformed

    private void loadTreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTreeButtonActionPerformed
        if (filepath != null) {

//            SpeciesLoadingErrorsListener errorListener = new SpeciesLoadingErrorsListener(loaderPanel);
            //           DefaultLoadingController.loadSpeciesTreeData(filepath, errorListener);
            setLoadedState();
        //    list.actionPerformed(new ActionEvent(this, 1, "Species loaded"));
        }
}//GEN-LAST:event_loadTreeButtonActionPerformed
    public void setLoadedState() {
        loadTreeButton.setEnabled(false);
        chooseFile.setEnabled(false);
        if (PluginDataHandle.getLoadedDataHandle().isProteinsLoaded()) {
            cleanButton.setEnabled(false);
        } else {
            cleanButton.setEnabled(true);
        }

        setFilenameLabel();
    }

    public void setUnloadedState() {
        speciesTree.setModel(null);
        loadTreeButton.setEnabled(true);
        chooseFile.setEnabled(true);
        cleanButton.setEnabled(false);
        setFilenameLabel();
    }

    private void setFilenameLabel() {
        String filename = PluginDataHandle.getLoadingDataHandle().getSpeciesFilename();
        if (filename != null) {
            filenameLabel.setText(filename);
            filepath = filename;
        } else {
            loadTreeButton.setEnabled(false);
        }
    }

    private void cleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanButtonActionPerformed
        UIController.getInstance().deleteData();
        setUnloadedState();
}//GEN-LAST:event_cleanButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        CSH.DisplayHelpFromSource csh = new CSH.DisplayHelpFromSource(MCVHelpBroker.getHelpBroker("Species file format"));
        csh.actionPerformed(new ActionEvent(this, 120, "Species file format"));
}//GEN-LAST:event_helpButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFile;
    private javax.swing.JButton cleanButton;
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JButton helpButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadTreeButton;
    private javax.swing.JTree speciesTree;
    // End of variables declaration//GEN-END:variables
}
